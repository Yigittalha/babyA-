version: '3.8'

services:
  # Redis for caching and rate limiting
  redis:
    image: redis:7.0-alpine
    container_name: babyai_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - babyai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production (optional, keeping SQLite for development)
  postgres:
    image: postgres:15-alpine
    container_name: babyai_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: babyai
      POSTGRES_USER: babyai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-babyai_secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - babyai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U babyai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: babyai_backend
    restart: unless-stopped
    environment:
      # Application settings
      ENVIRONMENT: development
      DEBUG: true
      
      # Database
      DATABASE_URL: ${DATABASE_URL:-sqlite:///./baby_names.db}
      # For PostgreSQL: postgresql://babyai:babyai_secure_password@postgres:5432/babyai
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_PASSWORD: ""
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      
      # API Keys
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      OPENROUTER_BASE_URL: https://openrouter.ai/api/v1
      OPENROUTER_MODEL: anthropic/claude-3-haiku
      
      # Rate limiting
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_CALLS: 100
      RATE_LIMIT_PERIOD: 60
      
      # CORS
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://localhost:5174,http://localhost:5175"
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      
      # Features
      ENABLE_CACHING: true
      ENABLE_ANALYTICS: true
      SECURITY_HEADERS_ENABLED: true
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - backend_data:/app/data
    depends_on:
      - redis
    networks:
      - babyai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: babyai_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_ENVIRONMENT: development
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - babyai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: babyai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    networks:
      - babyai_network
    profiles:
      - production

  # Redis monitoring with RedisInsight (development)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: babyai_redis_insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    networks:
      - babyai_network
    profiles:
      - development

  # Prometheus for monitoring (production)
  prometheus:
    image: prom/prometheus:latest
    container_name: babyai_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - babyai_network
    profiles:
      - monitoring

  # Grafana for dashboards (production)
  grafana:
    image: grafana/grafana:latest
    container_name: babyai_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - babyai_network
    profiles:
      - monitoring

  # Log aggregation with Loki (production)
  loki:
    image: grafana/loki:2.9.0
    container_name: babyai_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - babyai_network
    profiles:
      - monitoring

  # Promtail for log shipping (production)
  promtail:
    image: grafana/promtail:2.9.0
    container_name: babyai_promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - backend_logs:/var/log/backend:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - babyai_network
    profiles:
      - monitoring

networks:
  babyai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  backend_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local 